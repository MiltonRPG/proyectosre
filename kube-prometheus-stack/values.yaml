# Archivo: values.yaml

# Configuraciones para habilitar o deshabilitar componentes de Kubernetes
coreDns:
  enabled: true
  service:
    selector:
      k8s-app: kube-dns

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: true
  service:
    selector:
      k8s-app: ""
      component: etcd

kubeScheduler:
  enabled: false

kubeApiServer:
  enabled: true

kubelet:
  enabled: false

kubeDns:
  enabled: false

kubeProxy:
  enabled: true

kubeStateMetrics:
  enabled: true

nodeExporter:
  enabled: true
  jobLabel: node-exporter
  serviceMonitor:
    relabelings:
      - targetLabel: job
        replacement: node-exporter

prometheus-node-exporter:
  podLabels:
    jobLabel: node-exporter
  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$

# Configuraciones de Prometheus
prometheus:
  enabled: true
  prometheusSpec:
    scrapeInterval: 30s
    scrapeTimeout: 10s
    enableAdminAPI: true
    externalUrl: ""
    ruleSelectorNilUsesHelmValues: true
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    serviceMonitorSelector: {}
    # Añadido para habilitar el descubrimiento de Pods basados en anotaciones
    additionalScrapeConfigs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: keep
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            regex: 'true'
          - action: replace
            source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
            target_label: __metrics_path__
            regex: (.+)
          - action: replace
            source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

# Reglas predeterminadas de alertas
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# Configuración de Alertmanager
alertmanager:
  enabled: true
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
    inhibit_rules:
      - target_match_re:
          alertname: '.+Overcommit'
        source_match:
          alertname: 'Watchdog'
        equal: ['prometheus']
    receivers:
      - name: 'null'
      - name: 'slack'
        slack_configs:
          - send_resolved: true
            channel: '#alarms-notifications-keepcoding-devops'  # Tu canal de Slack
            title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] Monitoring Event Notification'
            text: |-
              {{ range .Alerts }}
                *Alert:* {{ .Labels.alertname }} - `{{ .Labels.severity }}`
                *Description:* {{ .Annotations.message }}
                *Details:*
                {{ range .Labels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}
            api_url: 'https://hooks.slack.com/services/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'  # Referencia al webhook que estará en values-secret.yaml

# Habilitar Prometheus Operator
prometheusOperator:
  enabled: true

# Reglas de alertas adicionales para tu aplicación
additionalPrometheusRulesMap:
  myapp-rules:
    groups:
      - name: myapp-ruleset
        rules:
          - alert: MyAppDown
            expr: up{job="kubernetes-pods", pod=~"myapp-.*"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: 'Mi Aplicación está caída ({{ $labels.instance }})'
              description: 'La aplicación "myapp" no está disponible en {{ $labels.instance }}'
          - alert: MyAppHighMemoryUsage
            expr: avg(container_memory_usage_bytes{pod=~"myapp-.*"}) by (pod) >
                  avg(kube_pod_container_resource_requests_memory_bytes{pod=~"myapp-.*"}) by (pod)
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: 'Uso alto de memoria en {{ $labels.pod }}'
              description: 'El pod {{ $labels.pod }} está consumiendo más memoria de la solicitada'
          - alert: MyAppHighCPUUsage
            expr: sum(rate(container_cpu_usage_seconds_total{pod=~"myapp-.*", image!="", container!="POD"}[1m])) by (pod) >
                  sum(kube_pod_container_resource_limits_cpu_cores{pod=~"myapp-.*"}) by (pod)
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: 'Uso alto de CPU en {{ $labels.pod }}'
              description: 'El pod {{ $labels.pod }} está consumiendo más CPU de la limitada'
              
  test-alert:
    groups:
      - name: test-alert-group
        rules:
          - alert: TestAlert
            expr: vector(1)
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: 'Alerta de Prueba'
              description: 'Esta es una alerta de prueba para verificar la integración con Slack.'

# Configuración de Grafana (opcional)
grafana:
  sidecar:
    dashboards:
      enabled: true
      label: grafana_dashboard
      folder: /var/lib/grafana/dashboards
      searchNamespace: ALL
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: "default"
          orgId: 1
          folder: ""
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards





